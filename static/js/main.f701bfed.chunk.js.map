{"version":3,"sources":["components/TaskSearch.js","components/TaskSort.js","components/TaskControl.js","components/TaskItem.js","components/TaskList.js","components/TaskForm.js","App.js","serviceWorker.js","index.js"],"names":["TaskSearch","props","onChange","e","target","name","value","setState","onSearch","state","keyword","this","className","type","placeholder","aria-label","aria-describedby","onClick","React","Component","TaskSort","sortBy","sortValue","a","sort","by","onSort","data-toggle","aria-haspopup","aria-expanded","href","TaskControl","TaskItem","onUpdateStatus","task","id","onDelete","onUpdate","index","scope","status","title","TaskList","onFilter","filterName","filterStatus","tasks","elementTasks","map","key","TaskForm","onCloseForm","event","JSON","parse","onSubmit","preventDefault","onClear","nextProps","htmlFor","App","toggleForm","isDisplayForm","taskEditing","onShowForm","data","generateId","push","findIndex","localStorage","setItem","stringify","result","forEach","splice","filter","toLowerCase","getItem","Math","floor","random","toString","substring","indexOf","elementTaskForm","b","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.f701bfed.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nclass TaskSearch extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            keyword: \"\",\r\n        };\r\n    }\r\n\r\n    onChange = (e) => {\r\n        const target = e.target,\r\n            name = target.name,\r\n            value = target.value;\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    onSearch = () => {\r\n        this.props.onSearch(this.state.keyword);\r\n    };\r\n\r\n    render() {\r\n        let { keyword } = this.state;\r\n        return (\r\n            <div className=\"input-group mw-500 mgr-10\">\r\n                <input\r\n                    type=\"text\"\r\n                    className=\"form-control\"\r\n                    placeholder=\"Search\"\r\n                    aria-label=\"Recipient's username\"\r\n                    aria-describedby=\"basic-addon2\"\r\n                    name=\"keyword\"\r\n                    value={keyword}\r\n                    onChange={this.onChange}\r\n                />\r\n                <div className=\"input-group-append\">\r\n                    <button\r\n                        type=\"button\"\r\n                        className=\"btn btn-info\"\r\n                        onClick={this.onSearch}\r\n                    >\r\n                        <span className=\"flaticon-search flaticon\" />\r\n                        <span>Search</span>\r\n                    </button>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskSearch;\r\n","import React from \"react\";\r\n\r\nclass TaskSort extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            sort: {\r\n                by: \"\",\r\n                value: 1,\r\n            },\r\n        };\r\n    }\r\n\r\n    onClick = async (sortBy, sortValue) => {\r\n        //setState is asynchronous so use asyn/await to solve it\r\n        await this.setState({\r\n            //use await word mean: program will stop this function(contain await) and not do next function. when this function done do next function\r\n            sort: {\r\n                by: sortBy,\r\n                value: sortValue,\r\n            },\r\n        });\r\n        this.props.onSort(this.state.sort);\r\n    };\r\n\r\n    render() {\r\n        let { sort } = this.state;\r\n        return (\r\n            <div className=\"btn-group\">\r\n                <button\r\n                    type=\"button\"\r\n                    className=\"btn btn-danger dropdown-toggle\"\r\n                    data-toggle=\"dropdown\"\r\n                    aria-haspopup=\"true\"\r\n                    aria-expanded=\"false\"\r\n                >\r\n                    <span className=\"mgr-5\">Sort</span>\r\n                </button>\r\n                <div className=\"dropdown-menu\">\r\n                    <a\r\n                        className=\"dropdown-item flaticon-sort-down\"\r\n                        href=\"/#\"\r\n                        onClick={() => {\r\n                            this.onClick(\"name\", 1); //insert data\r\n                        }}\r\n                    >\r\n                        <span\r\n                            className={\r\n                                sort.by === \"name\" && sort.value === 1\r\n                                    ? \"tick mgl-10\"\r\n                                    : \"mgl-10\"\r\n                            }\r\n                        >\r\n                            A - Z\r\n                        </span>\r\n                    </a>\r\n                    <a\r\n                        className=\"dropdown-item flaticon-sort-ascending\"\r\n                        href=\"/#\"\r\n                        onClick={() => {\r\n                            this.onClick(\"name\", -1); //insert data\r\n                        }}\r\n                    >\r\n                        <span\r\n                            className={\r\n                                sort.by === \"name\" && sort.value === -1\r\n                                    ? \"tick mgl-10\"\r\n                                    : \"mgl-10\"\r\n                            }\r\n                        >\r\n                            Z - A\r\n                        </span>\r\n                    </a>\r\n                    <div className=\"dropdown-divider\" />\r\n                    <a\r\n                        className=\"dropdown-item\"\r\n                        href=\"/#\"\r\n                        onClick={() => {\r\n                            this.onClick(\"status\", 1); //insert data\r\n                        }}\r\n                    >\r\n                        <span\r\n                            className={\r\n                                sort.by === \"status\" && sort.value === 1\r\n                                    ? \"tick\"\r\n                                    : \"\"\r\n                            }\r\n                        >\r\n                            Finished\r\n                        </span>\r\n                    </a>\r\n                    <a\r\n                        className=\"dropdown-item\"\r\n                        href=\"/#\"\r\n                        onClick={() => {\r\n                            this.onClick(\"status\", -1); //insert data\r\n                        }}\r\n                    >\r\n                        <span\r\n                            className={\r\n                                sort.by === \"status\" && sort.value === -1\r\n                                    ? \"tick\"\r\n                                    : \"\"\r\n                            }\r\n                        >\r\n                            Unfinished\r\n                        </span>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskSort;\r\n","import React from \"react\";\r\nimport TaskSearch from \"./TaskSearch\";\r\nimport TaskSort from \"./TaskSort\";\r\n\r\nclass TaskControl extends React.Component {\r\n    render() {\r\n        return (\r\n            <div className=\"w-100 d-flex mgb-20\">\r\n                {/* Search */}\r\n                <TaskSearch onSearch={this.props.onSearch} />\r\n                {/*Sort */}\r\n                <TaskSort onSort={this.props.onSort} />\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskControl;\r\n\r\n// fix sort and\r\n","import React from \"react\";\r\n\r\nclass TaskItem extends React.Component {\r\n    //Update status\r\n    onUpdateStatus = () => {\r\n        this.props.onUpdateStatus(this.props.task.id);\r\n    };\r\n\r\n    //Delete work\r\n    onDelete = () => {\r\n        this.props.onDelete(this.props.task.id);\r\n    };\r\n\r\n    //Update work\r\n    onUpdate = () => {\r\n        this.props.onUpdate(this.props.task.id);\r\n    };\r\n\r\n    render() {\r\n        var { task, index } = this.props;\r\n        return (\r\n            <tr>\r\n                <th scope=\"row\">{index}</th>\r\n                <th>{task.name}</th>\r\n                <th>\r\n                    <button\r\n                        type=\"button\"\r\n                        className={\r\n                            task.status === true\r\n                                ? \"btnTable btn btn-danger\"\r\n                                : \"btnTable btn btn-info\"\r\n                        }\r\n                        onClick={this.onUpdateStatus}\r\n                    >\r\n                        {task.status === true ? \"Finished\" : \"Unfinished\"}\r\n                    </button>\r\n                </th>\r\n                <th>\r\n                    {\" \"}\r\n                    <div className=\"tableIcon\">\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-info\"\r\n                            title=\"Edit\"\r\n                            onClick={this.onUpdate}\r\n                        >\r\n                            <span className=\"flaticon-edit flaticon\"></span>\r\n                        </button>\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-danger\"\r\n                            title=\"Delete\"\r\n                            onClick={this.onDelete}\r\n                        >\r\n                            <span className=\"flaticon-cancel flaticon\"></span>\r\n                        </button>\r\n                    </div>\r\n                </th>\r\n            </tr>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskItem;\r\n","import React from \"react\";\r\n\r\nimport TaskItem from \"./TaskItem\";\r\n\r\nclass TaskList extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            filterName: \"\",\r\n            filterStatus: -1, // -1: all (default), 1: active, 0: de-active\r\n        };\r\n    }\r\n\r\n    onChange = (e) => {\r\n        let target = e.target;\r\n        let name = target.name;\r\n        let value = target.value;\r\n        this.props.onFilter(\r\n            name === \"filterName\" ? value : this.state.filterName, // transfer data to parent app component\r\n            name === \"filterStatus\" ? value : this.state.filterStatus\r\n        ); // transfer data to parent app component\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        var { tasks } = this.props; //var tasks = this.props.tasks\r\n        let { filterName, filterStatus } = this.state;\r\n        var elementTasks = tasks.map((task, index) => {\r\n            return (\r\n                <TaskItem\r\n                    key={task.id}\r\n                    index={index + 1}\r\n                    task={task}\r\n                    onUpdateStatus={this.props.onUpdateStatus}\r\n                    onDelete={this.props.onDelete}\r\n                    onUpdate={this.props.onUpdate}\r\n                />\r\n            );\r\n        });\r\n\r\n        return (\r\n            <table className=\"table ovh bg\">\r\n                <thead>\r\n                    <tr>\r\n                        <th scope=\"col\">STT</th>\r\n                        <th scope=\"col\">Work</th>\r\n                        <th scope=\"col\">Status</th>\r\n                        <th scope=\"col\">Action</th>\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    <tr>\r\n                        <th scope=\"row\" />\r\n                        <th>\r\n                            <div className=\"form-group mgb-0\">\r\n                                <input\r\n                                    type=\"text\"\r\n                                    className=\"form-control\"\r\n                                    id=\"formGroupExampleInput\"\r\n                                    placeholder=\"Example input\"\r\n                                    name=\"filterName\"\r\n                                    value={filterName}\r\n                                    onChange={this.onChange}\r\n                                />\r\n                            </div>\r\n                        </th>\r\n                        <th>\r\n                            <select\r\n                                className=\"form-control\"\r\n                                name=\"filterStatus\"\r\n                                value={filterStatus}\r\n                                onChange={this.onChange}\r\n                            >\r\n                                <option value={-1}>All</option>\r\n                                <option value={0}>Finished</option>\r\n                                <option value={1}>Unfinished</option>\r\n                            </select>\r\n                        </th>\r\n                        <th></th>\r\n                    </tr>\r\n                    {/* Tasks Item */}\r\n                    {elementTasks}\r\n                </tbody>\r\n            </table>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskList;\r\n","import React from \"react\";\r\n\r\nclass TaskForm extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            id: \"\",\r\n            name: \"\",\r\n            status: false,\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        if (this.props.task) {\r\n            this.setState({\r\n                id: this.props.task.id,\r\n                name: this.props.task.name,\r\n                status: this.props.task.status,\r\n            });\r\n        }\r\n    }\r\n\r\n    // receive props when taskForm is displayed\r\n    UNSAFE_componentWillReceiveProps(nextProps) {\r\n        // console.log(nextProps);\r\n        // console.log(nextProps.task);\r\n        if (nextProps && nextProps.task) {\r\n            this.setState({\r\n                // when user click editing btn\r\n                id: nextProps.task.id,\r\n                name: nextProps.task.name,\r\n                status: nextProps.task.status,\r\n            });\r\n        } else if (!nextProps.task) {\r\n            //when user editing and click add btn\r\n            this.setState({\r\n                id: \"\",\r\n                name: \"\",\r\n                status: false,\r\n            });\r\n        }\r\n    }\r\n\r\n    //close form\r\n    onCloseForm = () => {\r\n        this.props.onCloseForm();\r\n    };\r\n\r\n    //receive data form input tag\r\n    onChange = (event) => {\r\n        let target = event.target;\r\n        let name = target.name;\r\n        let value = target.value;\r\n        if (name === \"status\") {\r\n            value = JSON.parse(target.value);\r\n        }\r\n        this.setState({\r\n            [name]: value,\r\n        });\r\n    };\r\n\r\n    //get data when click submit button\r\n    onSubmit = (event) => {\r\n        event.preventDefault(); //delete default submit\r\n\r\n        //receive props from app.js\r\n        this.props.onSubmit(this.state);\r\n\r\n        // clear data when click submit (submit done) and close form\r\n        this.onClear();\r\n        this.onCloseForm();\r\n    };\r\n\r\n    //delete data when click button remove\r\n    onClear = () => {\r\n        this.setState({\r\n            name: \"\",\r\n            status: false,\r\n        });\r\n    };\r\n\r\n    render() {\r\n        let { id } = this.state;\r\n        return (\r\n            <div className=\"w-100\">\r\n                <div className=\"header\">\r\n                    <h3>{id !== \"\" ? \"Update\" : \"Add new work\"}</h3>\r\n                    <span\r\n                        className=\"flaticon-cancel\"\r\n                        onClick={this.onCloseForm}\r\n                    ></span>\r\n                </div>\r\n                <form onSubmit={this.onSubmit}>\r\n                    <div className=\"form-group\">\r\n                        <label htmlFor=\"Input\">Action</label>\r\n                        <input\r\n                            type=\"text\"\r\n                            className=\"form-control\"\r\n                            id=\"Input\"\r\n                            placeholder=\"What will you do?\"\r\n                            name=\"name\"\r\n                            value={this.state.name}\r\n                            onChange={this.onChange}\r\n                        />\r\n                    </div>\r\n                    <label htmlFor=\"formGroupExampleInput\">Status</label>\r\n                    <select\r\n                        className=\"form-control\"\r\n                        name=\"status\"\r\n                        value={this.state.status}\r\n                        onChange={this.onChange}\r\n                    >\r\n                        <option value={true}>Finished</option>\r\n                        <option value={false}>UnFinished</option>\r\n                    </select>\r\n                    <div className=\"btn-save\">\r\n                        <button type=\"submit\" className=\"btn btn-info\">\r\n                            <span className=\"flaticon-add-1 flaticon\" />\r\n                            <span>Save</span>\r\n                        </button>\r\n                        <button\r\n                            type=\"button\"\r\n                            className=\"btn btn-danger\"\r\n                            onClick={this.onClear}\r\n                        >\r\n                            <span className=\"flaticon-cancel flaticon\" />\r\n                            <span>Remove</span>\r\n                        </button>\r\n                    </div>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default TaskForm;\r\n","import React from \"react\";\n\n// import TackForm from \"./components/TaskForm\";\nimport TaskControl from \"./components/TaskControl\";\nimport TaskList from \"./components/TaskList\";\n\nimport \"./FontIcon/flaticon.css\";\n\nimport \"./App.css\";\nimport TaskForm from \"./components/TaskForm\";\n\nclass App extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            tasks: [],\n            isDisplayForm: false,\n            taskEditing: null,\n            filter: {\n                name: \"\",\n                status: -1,\n            },\n            keyword: \"\",\n            sort: {\n                by: \"\",\n                value: 1,\n            },\n        };\n    }\n\n    componentDidMount() {\n        if (localStorage && localStorage.getItem(\"tasks\")) {\n            var tasks = JSON.parse(localStorage.getItem(\"tasks\"));\n            this.setState({ tasks: tasks }); //state is an object\n        }\n    }\n\n    // create unique id by native way\n    id() {\n        return Math.floor((1 + Math.random()) * 0x10000)\n            .toString(16)\n            .substring(1);\n    }\n    generateId() {\n        return (\n            this.id() +\n            this.id() +\n            \"-\" +\n            this.id() +\n            \"-\" +\n            this.id() +\n            \"-\" +\n            this.id()\n        );\n    }\n    //toggle display form\n    toggleForm = () => {\n        if (this.state.isDisplayForm && this.state.taskEditing !== null) {\n            this.setState({\n                isDisplayForm: true,\n                taskEditing: null,\n            });\n        } else {\n            this.setState({\n                isDisplayForm: !this.state.isDisplayForm,\n                taskEditing: null,\n            });\n        }\n    };\n\n    //close form when click icon close button\n    onCloseForm = () => {\n        this.setState({\n            isDisplayForm: false,\n        });\n    };\n\n    onShowForm = () => {\n        this.setState({\n            isDisplayForm: true,\n        });\n    };\n\n    onSubmit = (data) => {\n        let { tasks } = this.state; // let tasks = this.state.tasks\n        if (data.id === \"\") {\n            //Add and save new work\n            data.id = this.generateId();\n            tasks.push(data);\n        } else {\n            let index = this.findIndex(data.id);\n            tasks[index] = data;\n        }\n\n        this.setState({\n            tasks: tasks,\n            taskEditing: null,\n        });\n        localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n    };\n\n    // Update Status\n    onUpdateStatus = (id) => {\n        let { tasks } = this.state;\n        // 1st way\n\n        // if (findId !== -1) {\n        //     tasks[findId].status = !tasks[findId].status;\n        //     this.setState({\n        //         tasks: tasks,\n        //     });\n        // }\n        // for (let i = 0; i < findId.length; i++) {\n        //     findId[i] = !findId[i];\n        //     // console.log(findId[i]);\n        //     this.setState({\n        //         tasks: tasks,\n        //     });\n        // }\n        // tasks[index].status = !tasks[index].status;\n        // // 2nd way\n\n        // setState and save at local storage\n        let index = this.findIndex(id);\n        if (index !== -1) {\n            tasks[index].status = !tasks[index].status;\n            this.setState({\n                tasks: tasks,\n            });\n            localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n        }\n    };\n\n    findIndex = (id) => {\n        let { tasks } = this.state;\n        let result = -1;\n        tasks.forEach((task, index) => {\n            if (task.id === id) {\n                result = index;\n            }\n        });\n        return result;\n    };\n\n    // Delete Work and close form\n    onDelete = (id) => {\n        const { tasks } = this.state;\n\n        //1st way\n        // let filterResult = tasks.filter((task) => task.id !== id);\n        // this.setState({\n        //     tasks: filterResult,\n        // });\n        // localStorage.setItem(\"tasks\", JSON.stringify(filterResult));\n        // this.onCloseForm();\n\n        // 2nd way\n        let index = this.findIndex(id);\n        if (index !== -1) {\n            tasks.splice(index, 1);\n            this.setState({\n                tasks: tasks,\n            });\n            localStorage.setItem(\"tasks\", JSON.stringify(tasks));\n        }\n        this.onCloseForm();\n    };\n\n    // Update work\n    onUpdate = (id) => {\n        const { tasks } = this.state;\n        let index = this.findIndex(id);\n        this.setState(\n            //setState is asynchronous\n            {\n                taskEditing: tasks[index],\n            }\n            //so if want receive data before do next steps, must make asynchronous to synchronous by use function\n        );\n        this.onShowForm();\n    };\n\n    // filter work\n    onFilter = (filterName, filterStatus) => {\n        filterStatus = +filterStatus; //convert string to number\n        this.setState({\n            filter: {\n                name: filterName.toLowerCase(),\n                status: filterStatus,\n            },\n        });\n    };\n\n    // search\n    onSearch = (keyword) => {\n        this.setState({\n            keyword: keyword,\n        });\n    };\n\n    // Sort\n    onSort = (value) => {\n        this.setState({\n            sort: {\n                by: value.by,\n                value: value.value,\n            },\n        });\n    };\n\n    render() {\n        var {\n            tasks,\n            isDisplayForm,\n            taskEditing,\n            filter,\n            keyword,\n            sort,\n        } = this.state; // var tasks = this.state.tasks\n\n        // filter\n        if (filter) {\n            // filter exist\n            // filter by name\n            if (filter.name) {\n                tasks = tasks.filter((task) => {\n                    return task.name.toLowerCase().indexOf(filter.name) !== -1;\n                });\n            }\n            // filter by status\n            tasks = tasks.filter((task) => {\n                if (filter.status === -1) {\n                    //default: return all work\n                    return task;\n                } else {\n                    return task.status === (filter.status === 1 ? false : true);\n                }\n            });\n        }\n\n        // find\n        if (keyword) {\n            tasks = tasks.filter((task) => {\n                return task.name.toLowerCase().indexOf(keyword) !== -1;\n            });\n        }\n        //Condition for display Task Form\n        var elementTaskForm = isDisplayForm ? (\n            <TaskForm\n                onCloseForm={this.onCloseForm}\n                onSubmit={this.onSubmit}\n                task={taskEditing}\n            />\n        ) : (\n            \"\"\n        );\n\n        //sort\n        if (sort.by === \"name\") {\n            tasks.sort((a, b) => {\n                if (a.name > b.name) return sort.value;\n                else if (a.name < b.name) return -sort.value;\n                else return 0;\n            });\n        } else if (sort.by === \"status\") {\n            tasks.sort((a, b) => {\n                if (a.status > b.status) return -sort.value;\n                else if (a.status < b.status) return sort.value;\n                else return 0;\n            });\n        }\n        return (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-lg-12\">\n                        <h1 className=\"work_title text-center\">\n                            Work Management\n                        </h1>\n                    </div>\n                </div>\n\n                {/* Control has Search and Sort */}\n\n                <div className=\"row mgt-30\">\n                    {/* Task Form */}\n                    <div className={isDisplayForm ? \"col-lg-4 bg tran-5\" : \"\"}>\n                        {elementTaskForm}\n                    </div>\n                    {/* Task List */}\n                    <div className={isDisplayForm ? \"col-lg-8\" : \"col-lg-12\"}>\n                        <button\n                            type=\"button\"\n                            className=\"btn btn-info mgb-20 mgr-10\"\n                            onClick={this.toggleForm}\n                        >\n                            <span className=\"flaticon-add-1 flaticon\"></span>\n                            <span>Add new work</span>\n                        </button>\n\n                        <TaskControl\n                            onSearch={this.onSearch}\n                            onSort={this.onSort}\n                        />\n\n                        <TaskList\n                            tasks={tasks}\n                            // isDisplayForm={isDisplayForm}\n                            onUpdateStatus={this.onUpdateStatus}\n                            onDelete={this.onDelete}\n                            onUpdate={this.onUpdate}\n                            onFilter={this.onFilter}\n                        />\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}